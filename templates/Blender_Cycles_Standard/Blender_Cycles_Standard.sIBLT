[Template]
Name = @Name | Blender Cycles Standard | String | Template Name
Path = @Path | | String | Template Path
HelpFile = @HelpFile | help/Blender_Cycles_Standard_Template_Manual.html | String | Help File
Release = @Release | 0.5.0 | String | Template Release
Date = @Date | 2 October 2013 | String | Date
Author = @Author | Jed Frechette | String | Author
Email = @Email | jedfrechette@gmail.com | String | Email
Url = @Url | http://wiki.blender.org/index.php/Extensions:2.6/Py/Scripts/Import-Export/sIBL_GUI | String | Url
Software = @Software | Blender | String | Software
Version = @Version | 2.68+ | String | Version
Renderer = @Renderer | Cycles | String | Renderer
OutputScript = @OutputScript | sIBL_Blender_Cycles_Import.py | String | Output Script
Comment = @Comment | This is Blender Cycles Template. | String | Comment

[Ibl Set Attributes]
Background|BGfile = @BGfile
Background|BGheight = @BGheight
Enviroment|EVfile = @EVfile
Enviroment|EVmulti = @EVmulti
Enviroment|EVgamma = @EVgamma
Reflection|REFfile = @REFfile
Reflection|REFmulti = @REFmulti
Reflection|REFgamma = @REFgamma
Sun|SUNu = @SUNu
Sun|SUNv = @SUNv
Sun|SUNcolor = @SUNcolor
Sun|SUNmulti = @SUNmulti
Header|Height = @Height
Header|North = @North
Header|Name = @Name
Lights|DynamicLights = @dynamicLights

[Common Attributes]
sceneSetupPrefix = @sceneSetupPrefix | sIBL | String | Scene Setup Prefix
createBackground = @createBackground | 1 | Boolean | Create Background
createReflection = @createReflection | 1 | Boolean | Create Reflection
createLighting = @createLighting | 1 | Boolean | Create Lighting
createSun = @createSun | 1 | Boolean | Create Sun
createLights = @createLights | 1 | Boolean | Create Dynamic Lights

[Additional Attributes]
lightStrength = @lightStrength | 0 | Float | Total Light Strength
sunLightType = @sunLightType | Sun;Area;Spot;Point | Enum | Sun Light Type
dynamicLightsType = @dynamicLightsType | Sun;Area;Spot;Point | Enum | Dynamic Lights Type
misEnvironment = @misEnvironment | 1 | Boolean | Importance Sample Environment
misSun = @misSun | 0 | Boolean | Importance Sample Sun
misDynamic = @misDynamic | 0 | Boolean | Importance Sample Dynamic Lights
hideLights = @hideLights | 1 | Boolean | Hide Lights
createGround = @createGround | 1 | Boolean | Create Ground
aoCatcher = @aoCatcher | 1 | Boolean | Ground AO Catcher

[Remote Connection]
ConnectionType = @ConnectionType | Socket | String | Connection Type
ExecutionCommand = @ExecutionCommand | $loaderScriptPath | String | Execution Command
DefaultAddress = @DefaultAddress | 127.0.0.1 | Integer | Default Address
DefaultPort = @DefaultPort | 2048 | Integer | Default Port

[Script]
"""
@OutputScript - @Release for @Software @Version
Author: @Author
EMail: @Email
Homepage: @Url
Template path: @Path
Template last modified: @Date
See sIBL variables section for sIBL set specific variables.
"""

# Standard library imports
from math import cos, sin, pi
from os import path

# Blender imports
import bpy
import bmesh

def close(a, b, rtol=0.00001, atol=0.00000001):
    """Return true if two floats are equal within a tolerance.

    Modeled after Numpy's allclose."""
    return abs(a - b) <= (atol + rtol * abs(b))

def convertInputColors(color):
    """Convert list of colors in range 0-255 to range 0-1."""
    if color == [-1]:
        return color

    return [value / 255.0 for value in color]

def distributeNodesHorizontal(node_list, margin):
    """Layout nodes in a horizontal line separated by margin.

    Nodes are positioned relative to the first node in the list. If the margin
    is positive they will be positioned from left to right, otherwise from
    right to left."""
    datum = node_list[0]
    for node in node_list[1:]:
        if margin >= 0:
            node.location = (datum.location[0] + datum.width + margin,
                             datum.location[1])
        else:
            node.location = (datum.location[0] - node.width + margin,
                             datum.location[1])
        datum = node

def distributeNodesVertical(node_list, margin):
    """Distribute nodes in a vertical line separated by margin.

    Nodes are positioned relative to the first node in the list. If the margin
    is positive they will be positioned from top to bottom, otherwise from
    bottom to top."""
    datum = node_list[0]
    for node in node_list[1:]:
        if margin >= 0:
            node.location = (datum.location[0],
                             datum.location[1] - datum.height - margin)
        else:
            node.location = (datum.location[0],
                             datum.location[1] + node.height - margin)
        datum = node

def parseDynamicLightsAttribute(data):
    """Return dictionary of Light objects.

    If errors are encountered they returned as a list in the 'parserWarings' item."""
    if data == "-1":
        return {}

    dynamicLights = {}
    parserWarnings = []
    try:
        tokens = data.split("|")
        for i in range(0, len(tokens), 8):
            dynamicLights[tokens[i]] = Light(name=tokens[i+1].replace(" ", "_"),
                                             color=convertInputColors([float(tokens[i+2]),
                                                                       float(tokens[i+3]),
                                                                       float(tokens[i+4])]),
                                                                       multiplier=float(tokens[i+5]),
                                                                       uCoordinate=float(tokens[i+6]),
                                                                       vCoordinate=float(tokens[i+7]))
    except Exception as error:
        parserWarnings.append(('WARNING', "Exception raised while parsing " \
                               "the Dynamic Lights attribute: '%s'." % error))

    if parserWarnings:
        dynamicLights['parserWarnings'] = parserWarnings
    return dynamicLights

def setNodeName(node, name):
    """Set node 'name' and 'label' to match 'name'."""
    node.name = name
    node.label = name

    return node.name

def validateData():
    """Validate sIBL file.

    Return list of 2 tuples giving severity and error message."""
    errors = []

    for id, data in Data.dynamicLights.items():
        if id == 'parserWarnings':
            errors.extend(data)

    for name, img_file in (('Background Image', Data.backgroundFile),
                           ('Reflection Image', Data.reflectionFile),
                           ('Lighting Image', Data.lightingFile)):
        if img_file == "-1" or not path.isfile(img_file):
            errors.append(('ERROR', "Unable to read '%s' from '%s'." % (name,
                                                                        Data.name)))

    if Data.north == -1:
        Data.north = 0
    if Data.height == -1:
        Data.height = 0

    return errors

class Structure(object):
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)

class Light(Structure):
    pass

"""
###############################################################
Start sIBL variables.
###############################################################
"""

class Data(object):
    name = "@Name"
    backgroundFile = "@BGfile"
    backgroundWidth = @BGheight * 2
    reflectionFile = "@REFfile"
    reflectionMultiplier = @REFmulti
    reflectionGamma = @REFgamma
    lightingFile = "@EVfile"
    lightingMultiplier = @EVmulti
    lightingGamma = @EVgamma
    sunU = @SUNu
    sunV = @SUNv
    sunColor = convertInputColors([@SUNcolor])
    sunMultiplier = @SUNmulti
    dynamicLights = parseDynamicLightsAttribute("@dynamicLights")
    height = @Height
    north = @North

class Options(object):
    createBackground = @createBackground
    createReflection = @createReflection
    createLighting = @createLighting
    createSun = @createSun
    createLights = @createLights
    lightStrength = @lightStrength
    sunLightType = "@sunLightType"
    dynamicLightsType = "@dynamicLightsType"
    misEnvironment = @misEnvironment
    misSun = @misSun
    misDynamic = @misDynamic
    hideLights = @hideLights
    createGround = @createGround
    aoCatcher = @aoCatcher

class Constants(object):
    applicationName = "sIBL_GUI"
    prefix = "@sceneSetupPrefix"
    package = "@Software".replace(" ", "_")
    renderer = "@Renderer".replace(" ", "_")
    packagePrefix = "%s_%s" % (prefix, package)
    packageRendererPrefix = "%s_%s_%s" % (prefix, package, renderer)
    title = "sIBL"
    controlsTitle = "[ %s Controls ]" % title
    controlsRadius = 5
    nodeMargin = 50
    lightTypes = {"Area" : "AREA",
                  "Point" : "POINT",
                  "Spot" : "SPOT",
                  "Sun" : "SUN"}

"""
###############################################################
End sIBL variables.
###############################################################
"""

class SetupSIBL(bpy.types.Operator):
    """Setup sIBL lighting environment."""

    bl_idname = "import_sibl_gui.setup_sibl"
    bl_label = "Setup sIBL Lighting Environment"
    bl_options = {'REGISTER', 'UNDO', 'INTERNAL'}
    bl_description = "This operator is intended to be called by a sIBL_GUI " \
                     "helper script."

    scene = None
    world = None
    controlsEmpty = None
    imageLighting = None
    imageBackground = None
    imageReflection = None
    siblShader = None
    sun = None
    dynamicLights = None
    ground = None
    siblGroup = None

    def execute(self, context):
        msgs = validateData()
        for severity, msg in msgs:
            self.report({severity}, msg)
            if severity == 'ERROR':
                return {'CANCELLED'}

        self.scene = context.scene
        self._setCyclesRenderer()
        self._clearScene()
        if Options.hideLights:
            self._hideSceneLights()

        self.controlsEmpty = self._getControlsEmpty()
        images = self._getEnvironmentImages()
        self.imageBackground = images['background']
        self.imageReflection = images['reflection']
        self.imageLighting = images['lighting']
        self.siblShader = self._getEnvironmentShaders()
        self.world = self._getWorld()
        self.scene.world = self.world

        if close(Options.lightStrength, 0):
            slope = 1.0
        else:
            slope = Options.lightStrength / self.__getLightBrightness()
        if Options.createSun and Data.sunU != -1 and Data.sunV != -1:
            self.sun = self._getSun(slope)
        if Options.createLights and Data.dynamicLights:
            self.dynamicLights = self._getDynamicLights(slope)
        if Options.createGround:
            self.ground = self._getGround()

        self.siblGroup = self._getGroup()

        return {'FINISHED'}

    def _setCyclesRenderer(self):
        """Set renderer to Cycles."""
        self.scene.render.engine = 'CYCLES'

    def _clearScene(self):
        """Remove existing sIBL objects from Scene."""

        # Delete Scene World
        if self.scene.world:
            world = self.scene.world
            if self.scene.world.name.startswith(Constants.prefix):
                self.scene.world = None
                try:
                    bpy.data.worlds.remove(world)
                except:
                    print('Unable to delete %s, it has %i users.' % (data.name,
                                                                     data.users))
        # Delete objects
        for obj in self.scene.objects:
            if obj.name.startswith(Constants.prefix):
                self.scene.objects.unlink(obj)
                try:
                    if obj.type == 'EMPTY':
                        bpy.data.objects.remove(obj)
                    else:
                        data = obj.data
                        bpy.data.objects.remove(obj)
                        if type(data) == bpy.types.Mesh:
                            bpy.data.meshes.remove(data)
                        elif type(data) == bpy.types.Lamp:
                            bpy.data.lamps.remove(data)
                except RuntimeError:
                    print('Unable to delete %s, it has %i users.' % (data.name,
                                                                     data.users))
        # Delete groups
        for grp in bpy.data.groups:
            if grp.name.startswith(Constants.prefix) and not grp.objects.keys():
                bpy.data.groups.remove(grp)

    def _getEnvironmentImages(self):
        """Return dictionary of environment map images."""
        imgs = {'background': bpy.data.images.load(Data.backgroundFile),
                'reflection': bpy.data.images.load(Data.reflectionFile),
                'lighting': bpy.data.images.load(Data.lightingFile)}
        for img in imgs.values():
            img.name = ' '.join([Constants.prefix, img.name])
        return imgs

    def _getControlsEmpty(self):
        """Return controls empty object in scene."""
        name = '%s Controls %s' % (Constants.prefix, Data.name)
        if name in self.scene.objects.keys() \
           and type(self.scene.objects[name]) == bpy.types.Object \
           and self.scene.objects[name].type == 'EMPTY':
            return self.scene.objects[name]

        controls = bpy.data.objects.new(name, None)
        controls.empty_draw_type = 'SPHERE'
        controls.empty_draw_size = Constants.controlsRadius
        controls.location = (0, 0, Data.height)
        controls.rotation_euler = (0, 0, Data.north * 2 * pi)
        controls.lock_location = (True, True, True)
        controls.lock_rotation = (True, True, False)
        self.scene.objects.link(controls)

        return self.scene.objects[controls.name]

    def _hideSceneLights(self):
        """Hide all lamps in the current scene."""
        for obj in self.scene.objects:
            if obj.type == 'LAMP':
                obj.hide = True
                obj.hide_render = True

    def __getLightBrightness(self):
        """Return sum of multipliers for the Sun, and all Dynamic lights."""
        brightness = max(Data.sunMultiplier, 0)
        for id, data in Data.dynamicLights.items():
            if id == 'parserWarnings':
                continue
            brightness += data.multiplier
        return brightness

    def _getRGBAdjustmentGroup(self):
        """Return node group for adjusting the Brightness and contrast of each
        color channel in an RGB image."""
        name = '%s RGB Bright/Contrast' % Constants.prefix
        if name in bpy.data.node_groups.keys():
            return bpy.data.node_groups[name]
        else:
            adjust_group = bpy.data.node_groups.new(name,
                                                    'ShaderNodeTree')

        # Create Nodes
        grp_out = adjust_group.nodes.new('NodeGroupOutput')
        combine_rgb = adjust_group.nodes.new('ShaderNodeCombineRGB')

        adjust_r = adjust_group.nodes.new('ShaderNodeBrightContrast')
        setNodeName(adjust_r, 'Red Bright/Contrast')
        adjust_g = adjust_group.nodes.new('ShaderNodeBrightContrast')
        setNodeName(adjust_g, 'Green Bright/Contrast')
        adjust_b = adjust_group.nodes.new('ShaderNodeBrightContrast')
        setNodeName(adjust_b, 'Blue Bright/Contrast')

        split_rgb = adjust_group.nodes.new('ShaderNodeSeparateRGB')
        grp_in = adjust_group.nodes.new('NodeGroupInput')

        # Organize nodes
        distributeNodesHorizontal((grp_in, split_rgb, adjust_g, combine_rgb,
                                   grp_out), Constants.nodeMargin)
        distributeNodesVertical((adjust_g, adjust_b), Constants.nodeMargin)
        distributeNodesVertical((adjust_g, adjust_r), -Constants.nodeMargin)

        # Link Nodes
        adjust_group.links.new(combine_rgb.outputs[0],
                               grp_out.inputs[0])
        adjust_group.links.new(grp_in.outputs[0],
                               split_rgb.inputs['Image'])
        grp_in_socket = 1
        for node in (adjust_r, adjust_g, adjust_b):
            adjust_group.links.new(node.outputs['Color'],
                                   combine_rgb.inputs[node.name[0]])
            adjust_group.links.new(split_rgb.outputs[node.name[0]],
                                   node.inputs['Color'])
            for adj in ('Bright', 'Contrast'):
                adjust_group.links.new(grp_in.outputs[grp_in_socket],
                                       node.inputs[adj])
                adjust_group.inputs[grp_in_socket].name = '%s %s' % (node.name.split()[0],
                                                                     adj)
                grp_in_socket += 1

        return adjust_group

    def _getEnvironmentShaders(self):
        """Return sIBL environment shader node group used by current Scene
        World or new group."""

        rgb_adjust = self._getRGBAdjustmentGroup()

        name = '%s Shader %s' % (Constants.prefix, Data.name)
        if self.world and self.world.use_nodes and name in self.world.node_tree.nodes.keys():
            return self.world.node_tree.nodes[name]

        if name in bpy.data.node_groups.keys():
            shader_grp = bpy.data.node_groups[name]
            shader_grp.nodes.clear()
        else:
            shader_grp = bpy.data.node_groups.new(name, 'ShaderNodeTree')

        # Create Nodes
        grp_out = shader_grp.nodes.new('NodeGroupOutput')

        mix_bounce_cam = shader_grp.nodes.new('ShaderNodeMixShader')
        setNodeName(mix_bounce_cam, 'Mix Bounce/Camera')
        mix_enviro_refl = shader_grp.nodes.new('ShaderNodeMixShader')
        setNodeName(mix_enviro_refl, 'Mix Environment/Reflection')

        shader_background = shader_grp.nodes.new('ShaderNodeBackground')
        setNodeName(shader_background, 'Background Shader')
        shader_reflection = shader_grp.nodes.new('ShaderNodeBackground')
        setNodeName(shader_reflection, 'Reflection Shader')
        shader_lighting = shader_grp.nodes.new('ShaderNodeBackground')
        setNodeName(shader_lighting, 'Lighting Shader')

        adjust_background = shader_grp.nodes.new('ShaderNodeGroup')
        adjust_background.node_tree = rgb_adjust
        setNodeName(adjust_background, 'Adjust Background')
        adjust_reflection = shader_grp.nodes.new('ShaderNodeGroup')
        adjust_reflection.node_tree = rgb_adjust
        setNodeName(adjust_reflection, 'Adjust Reflection')
        adjust_lighting = shader_grp.nodes.new('ShaderNodeGroup')
        adjust_lighting.node_tree = rgb_adjust
        setNodeName(adjust_lighting, 'Adjust Lighting')

        image_background = shader_grp.nodes.new('ShaderNodeTexEnvironment')
        image_background.image = self.imageBackground
        setNodeName(image_background, 'Background Image')
        image_reflection = shader_grp.nodes.new('ShaderNodeTexEnvironment')
        image_reflection.image = self.imageReflection
        setNodeName(image_reflection, 'Reflection Image')
        image_lighting = shader_grp.nodes.new('ShaderNodeTexEnvironment')
        image_lighting.image = self.imageLighting
        setNodeName(image_lighting, 'Lighting Image')

        mapping = shader_grp.nodes.new('ShaderNodeMapping')

        input_lightpath = shader_grp.nodes.new('ShaderNodeLightPath')
        input_tex_coords = shader_grp.nodes.new('ShaderNodeTexCoord')
        grp_in = shader_grp.nodes.new('NodeGroupInput')

        # Organize Nodes
        distributeNodesVertical((shader_background, shader_reflection,
                                 shader_lighting), 3 * Constants.nodeMargin)
        distributeNodesVertical((shader_background, input_lightpath),
                                -3 * Constants.nodeMargin)
        distributeNodesHorizontal((shader_background, adjust_background,
                                   image_background, mapping, input_tex_coords),
                                  -Constants.nodeMargin)
        distributeNodesHorizontal((shader_reflection, adjust_reflection,
                                   image_reflection), -Constants.nodeMargin)
        distributeNodesHorizontal((shader_reflection, mix_enviro_refl,
                                   mix_bounce_cam, grp_out),
                                  Constants.nodeMargin)
        mix_enviro_refl.location[1] = mix_bounce_cam.location[1] - mix_bounce_cam.height

        distributeNodesHorizontal((shader_lighting, adjust_lighting,
                                   image_lighting), -Constants.nodeMargin)
        distributeNodesVertical((input_tex_coords, grp_in),
                                3 * Constants.nodeMargin)


        # Link Nodes
        shader_grp.links.new(mix_bounce_cam.outputs['Shader'],
                             grp_out.inputs[0])
        shader_grp.outputs[0].name = 'Background'

        shader_grp.links.new(input_lightpath.outputs['Is Camera Ray'],
                             mix_bounce_cam.inputs['Fac'])
        shader_grp.links.new(mix_enviro_refl.outputs['Shader'],
                             mix_bounce_cam.inputs[1])
        shader_grp.links.new(shader_background.outputs['Background'],
                             mix_bounce_cam.inputs[2])

        shader_grp.links.new(input_lightpath.outputs['Is Glossy Ray'],
                             mix_enviro_refl.inputs['Fac'])
        shader_grp.links.new(shader_lighting.outputs['Background'],
                             mix_enviro_refl.inputs[1])
        shader_grp.links.new(shader_reflection.outputs['Background'],
                             mix_enviro_refl.inputs[2])


        shader_grp.links.new(input_tex_coords.outputs['Generated'],
                             mapping.inputs['Vector'])
        grp_in_socket = 0
        for shader in (shader_background, shader_reflection, shader_lighting):
            shader_id = shader.name.split()[0]
            shader_grp.links.new(grp_in.outputs[grp_in_socket],
                                 shader.inputs['Strength'])
            shader_grp.inputs[grp_in_socket].name = 'Strength %s' % shader_id
            shader_grp.inputs[grp_in_socket].max_value = 100
            grp_in_socket += 1
        for shader, adjust, img in ((shader_background,
                                     adjust_background,
                                     image_background),
                                    (shader_reflection,
                                     adjust_reflection,
                                     image_reflection),
                                    (shader_lighting,
                                     adjust_lighting,
                                     image_lighting)):
            shader_grp.links.new(adjust.outputs[0],
                                 shader.inputs['Color'])
            shader_grp.links.new(img.outputs['Color'],
                                 adjust.inputs[0])
            shader_grp.links.new(mapping.outputs['Vector'],
                                 img.inputs['Vector'])

            shader_id = shader.name.split()[0]
            for socket_name, socket_num in (('Red Bright', 1),
                                            ('Red Contrast', 2),
                                            ('Green Bright', 3),
                                            ('Green Contrast', 4),
                                            ('Blue Bright', 5),
                                            ('Blue Contrast',6)):
                shader_grp.links.new(grp_in.outputs[grp_in_socket],
                                     adjust.inputs[socket_num])
                shader_grp.inputs[grp_in_socket].name = '%s %s' % (socket_name,
                                                                   shader_id)
                grp_in_socket += 1
        return shader_grp

    def _getWorld(self):
        """Return world in current scene."""
        name = '%s %s' %  (Constants.prefix, Data.name)
        if self.scene.world and self.scene.world.name == name:
            return self.scene.world

        world = bpy.data.worlds.new(name)
        world.use_nodes = True
        self._connectEnvironment(world)
        return world

    def _connectEnvironment(self, world, slope=1.0):
        """Connect Environment shader to world and control empty."""
        for key, value in world.node_tree.nodes.items():
            if key != 'World Output':
                world.node_tree.nodes.remove(value)
        shader_grp = world.node_tree.nodes.new('ShaderNodeGroup')
        shader_grp.node_tree = self.siblShader
        name = setNodeName(shader_grp, self.siblShader.name)
        distributeNodesHorizontal((shader_grp,
                                   world.node_tree.nodes['World Output']),
                                  Constants.nodeMargin)
        world.node_tree.links.new(shader_grp.outputs[0],
                                  world.node_tree.nodes['World Output'].inputs['Surface'])

        if Options.createBackground:
            shader_grp.inputs[0].default_value = 1
        else:
            shader_grp.inputs[0].default_value = 0
        if Options.createReflection:
            shader_grp.inputs[1].default_value = Data.reflectionMultiplier
        else:
            shader_grp.inputs[1].default_value = 0
        if Options.createLighting:
            shader_grp.inputs[2].default_value = Data.lightingMultiplier * slope
        else:
            shader_grp.inputs[2].default_value = 0
        if Options.misEnvironment:
            world.cycles.sample_as_light = True

        mapping_path = world.node_tree.nodes[name].node_tree.nodes['Mapping'].path_from_id('rotation')
        group_path = world.node_tree.nodes[name].path_from_id()

        # TODO: This is a horrible hack but it is not clear how to add the
        #       driver to the node group directly.
        bogus_mapping = world.node_tree.nodes.new('ShaderNodeMapping')
        bogus_mapping.label = 'Bogus Mapping'
        bogus_mapping.hide = True
        bogus_mapping.mute = True
        bogus_mapping.location = (0, -1000)
        rotation_z = world.node_tree.driver_add(bogus_mapping.path_from_id('rotation'), 2)
        rotation_z.data_path = '.'.join((group_path, 'node_tree', mapping_path))

        #TODO: Connecting a driver to the bogus_mapping node (even though it
        #      doesn't do anything is required so that the viewport background
        #      will update in real-time when viewed in 'Rendered' mode.
        bogus_z  = world.node_tree.driver_add(bogus_mapping.path_from_id('rotation'), 2)
        bogus_z.driver.type = 'SUM'
        bogus_target = bogus_z.driver.variables.new()
        bogus_target.name = 'rot_z'
        bogus_target.type = 'TRANSFORMS'
        bogus_target.targets[0].id = self._getControlsEmpty()
        bogus_target.targets[0].transform_type = 'ROT_Z'
        bogus_z.modifiers[0].coefficients = [pi / 2, -1]

        rotation_z.driver.type = 'SUM'
        rotation_target = rotation_z.driver.variables.new()
        rotation_target.name = 'rot_z'
        rotation_target.type = 'TRANSFORMS'
        rotation_target.targets[0].id = self._getControlsEmpty()
        rotation_target.targets[0].transform_type = 'ROT_Z'
        rotation_z.modifiers[0].coefficients = [pi / 2, -1]

    def _getLight(self, name, light_type, color, multiplier, uCoordinate,
                 vCoordinate, scale, enable_mis, slope=1.0):
        """Create lamp in current scene."""
        theta = -(uCoordinate - 0.25) * 2 * pi
        phi = vCoordinate * pi
        x = cos(theta) * sin(phi) * scale
        y = sin(theta) * sin(phi) * scale
        z = cos(phi) * scale

        light_data = bpy.data.lamps.new(name,
                                        type=Constants.lightTypes[light_type])
        light = bpy.data.objects.new(name, light_data)
        light.location = (x, y, z)

        if enable_mis:
            light_data.cycles.use_multiple_importance_sampling = True
        light_data.use_nodes = True

        # TODO: The following ad-hoc strength adjustments seem to give more or
        #       less the right answer but I should really dig in to Cycle's
        #       lighting code to figure out what the actual adjustments
        #       should be.
        if light_type == "Sun":
            # The default size produces shadows that are way to soft.
            light_data.shadow_soft_size = 0.01

        # Assume size is a diameter not radius.
        radius = light_data.shadow_soft_size / 2
        strength = 1 - radius**2
        if light_type in ("Point", "Spot"):
            strength *= 4 * pi * scale**2
        elif light_type == "Area":
            strength *= 4 * scale**2
        else:
            strength = 1
        strength *= multiplier * slope

        emission_shader = light.data.node_tree.nodes['Emission']
        emission_shader.inputs['Strength'].default_value =  strength
        emission_shader.inputs['Color'].default_value = (color[0],
                                                         color[1],
                                                         color[2],
                                                         1)

        light.constraints.new(type='CHILD_OF')
        light.constraints.active.name = 'Child of %s' % self.controlsEmpty.name
        light.constraints.active.target = self.controlsEmpty
        light.constraints.new(type='TRACK_TO')
        light.constraints.active.name = 'Track to %s' % self.controlsEmpty.name
        light.constraints.active.target = self.controlsEmpty
        light.constraints.active.up_axis = 'UP_Y'
        light.constraints.active.track_axis = 'TRACK_NEGATIVE_Z'

        light.lock_location = (True, True, True)
        light.lock_rotation = (True, True, True)
        light.lock_scale = (True, True, True)

        self.scene.objects.link(light)
        return light

    def _getSun(self, slope=1.0):
        """Return sun light in current scene."""
        name = "%s Sun %s" %  (Constants.prefix, Data.name)
        if name in self.scene.objects.keys() \
           and type(self.scene.objects[name]) == bpy.types.Lamp:
            sun = self.scene.objects[name]
        else:
            sun = self._getLight(name, Options.sunLightType, Data.sunColor,
                                Data.sunMultiplier, Data.sunU, Data.sunV,
                                Constants.controlsRadius * 4, Options.misSun,
                                slope)
        return sun

    def _getDynamicLights(self, slope=1.0):
        """Return list of dynamic lights in current scene."""
        dynamic_lights = []
        for id, data in Data.dynamicLights.items():
            if id == 'parserWarnings':
                continue
            name = "%s %s %s" % (Constants.prefix, data.name, Data.name)
            if name in self.scene.objects.keys() \
               and type(self.scene.objects[name]) == bpy.types.Lamp:
                dynamic_lights.append(self.scene.objects[name])
            else:
                dynamic_lights.append(self._getLight(name,
                                                    Options.dynamicLightsType,
                                                    data.color,
                                                    data.multiplier,
                                                    data.uCoordinate,
                                                    data.vCoordinate,
                                                    Constants.controlsRadius * 2,
                                                    Options.misDynamic,
                                                    slope))
        return dynamic_lights

    def _getAOCatcher(self):
        """Return Ambient Occlusion catcher material in current scene."""
        name = '%s AO Catcher %s' % (Constants.prefix, Data.name)
        for obj in self.scene.objects:
            if name in obj.material_slots.keys():
                return self.scene.objects.material_slots[name]

        if name in bpy.data.materials.keys():
            ao_catcher = bpy.data.materials[name]
        else:
            ao_catcher = bpy.data.materials.new(name)
        ao_catcher.use_nodes = True
        ao_catcher.node_tree.nodes.clear()

        # Create Nodes
        node_out = ao_catcher.node_tree.nodes.new('ShaderNodeOutputMaterial')
        node_ao = ao_catcher.node_tree.nodes.new('ShaderNodeAmbientOcclusion')
        node_bg = ao_catcher.node_tree.nodes.new('ShaderNodeTexEnvironment')
        node_bg.image = self.imageBackground
        node_mapping = ao_catcher.node_tree.nodes.new('ShaderNodeMapping')
        node_mapping.scale = (-1, -1, -1)
        node_geom = ao_catcher.node_tree.nodes.new('ShaderNodeNewGeometry')

        # Organize nodes
        distributeNodesHorizontal((node_geom, node_mapping, node_bg,
                                   node_ao, node_out), Constants.nodeMargin)

        # Link Nodes
        ao_catcher.node_tree.links.new(node_ao.outputs['AO'],
                                       node_out.inputs['Surface'])
        ao_catcher.node_tree.links.new(node_bg.outputs['Color'],
                                       node_ao.inputs['Color'])
        ao_catcher.node_tree.links.new(node_mapping.outputs['Vector'],
                                       node_bg.inputs['Vector'])
        ao_catcher.node_tree.links.new(node_geom.outputs['Incoming'],
                                       node_mapping.inputs['Vector'])

        mapping = ao_catcher.node_tree.nodes['Mapping']
        rotation_z = ao_catcher.node_tree.driver_add(mapping.path_from_id('rotation'),
                                                     2)
        rotation_z.driver.type = 'SUM'
        rotation_target = rotation_z.driver.variables.new()
        rotation_target.name = 'rot_z'
        rotation_target.type = 'TRANSFORMS'
        rotation_target.targets[0].id = self.controlsEmpty
        rotation_target.targets[0].transform_type = 'ROT_Z'
        rotation_z.modifiers[0].coefficients = [pi / 2, -1]
        return ao_catcher

    def _getGround(self):
        """Return ground plane in current scene."""
        name = "%s Ground %s" % (Constants.prefix, Data.name)
        if name in self.scene.objects.keys():
            return self.scene.objects[name]

        m_data = bpy.data.meshes.new(name)
        bm_data = bmesh.new()

        radius = Constants.controlsRadius * 2
        bm_data.verts.new((-radius, -radius, -Data.height))
        bm_data.verts.new((radius, -radius, -Data.height))
        bm_data.verts.new((radius, radius, -Data.height))
        bm_data.verts.new((-radius, radius, -Data.height))
        bm_data.faces.new(bm_data.verts)

        bm_data.to_mesh(m_data)
        bm_data.free()

        ground = bpy.data.objects.new(name, m_data)

        if Options.aoCatcher:
            ground.data.materials.append(self._getAOCatcher())

        ground.constraints.new(type='CHILD_OF')
        ground.constraints.active.name = 'Child of %s' % self.controlsEmpty.name
        ground.constraints.active.target = self.controlsEmpty

        ground.lock_location = (True, True, True)
        ground.lock_rotation = (True, True, True)
        ground.lock_scale = (True, True, True)

        self.scene.objects.link(ground)
        return ground

    def _getGroup(self):
        """Return sIBL group in current scene."""
        name = '%s %s' % (Constants.prefix, Data.name)
        if name in self.scene.objects.keys():
            return  self.scene.objects[name]

        group = bpy.data.groups.new(name)
        for obj in bpy.data.objects:
            if obj.name.startswith(Constants.prefix) and Data.name in obj.name:
                group.objects.link(obj)
        return group

if __name__ == '__main__':
    bpy.utils.register_class(SetupSIBL)
    bpy.ops.import_sibl_gui.setup_sibl()
